package com.wheaties.choice.setter

import com.wheaties.choice.iteration.IterationScheme
import com.scala.collection.mutable.Builder

trait IterableSetterR[BuildType, Collection <: Iterable[BuildType], ValueType] extends Setter[Collection,ValueType]{
  def set(collection: Collection, value: ValueType, scheme: IterationScheme) ={
    val buffer = builder
    val iter = collection toIterator
    while(iter hasNext){
      val next = iter next ()
      if(scheme accept (next)) buffer += value
      else buffer += next
    }

    buffer result ()
  }

  def builder: Builder[BuildType, Collection]
}

trait IterableSetter[BuildType, ValueType, Collection <: Iterable[BuildType], Collection2 <: Iterable[ValueType]]
    extends Setter[Collection,Collection2]{
  def set(collection: Collection, value: Collection2, scheme: IterationScheme) ={
    val buffer = builder
    val iter = collection toIterator
    val replaceIter = value toIterator
    while(iter.hasNext && replaceIter.hasNext){
      val next = iter next ()
      if(scheme accept (next)) buffer += replaceIter next ()
      else buffer += next
    }

    buffer result ()
  }

  def builder: Builder[BuildType, Collection]
}