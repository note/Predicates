package com.wheaties.choice.setter

import com.wheaties.choice.iteration.IterationScheme
import scala.collection.mutable.MutableList

abstract class ListSetterR[A,B <: A] extends IterableSetterR[A,B,List]{
  def builder = List.newBuilder[A]
}

abstract class ListSetter[A,B <: A,C[_] <: Iterable[_]] extends IterableSetter[A,B,List,C]{
  def builder = List.newBuilder[A]
}

abstract class MutableListSetterR[A,B <: A] extends IterableSetterR[A,B,MutableList]{
  def builder = MutableList.newBuilder[A]
}

abstract class MutableListSetter[A,B <: A,C[_] <: Iterable[_]] extends IterableSetter[A,B,MutableList,C]{
  def builder = MutableList.newBuilder[A]
}